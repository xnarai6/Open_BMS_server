const CMDType = {
    TpHd: 'TH',
    VoltCurr: 'VC',
    Loc: 'LOC',
    Ibt: 'IBT',
    Ts: 'TS'
}

const CMDVal = {
    TH: Buffer.from([0x0B, 0xA0]),
    VC: Buffer.from([0x0B, 0xA1]),
    LOC: Buffer.from([0x0B, 0xA2]),
    IBT: Buffer.from([0x0C, 0xA0]),
    TS: Buffer.from([0x0C, 0xA1]),
}

const CMDMainData = {
    TH: Buffer.concat([ makeRandomBuff(-500, 4000, 2), makeRandomBuff(0, 10000, 2), makeRandomBuff(-500, 4000, 2), makeRandomBuff(0, 10000, 2) ]),
    VC: Buffer.concat([ makeRandomBuff(0, 100000, 4), makeRandomBuff(0, 100000, 4) ]),
    LOC: Buffer.concat([ Buffer.from([37]), makeRandomBuff(5110000, 5119999, 4), Buffer.from([127]), makeRandomBuff(270000, 279999, 4) ])
}

const CMDBizData = {
    IBT: Buffer.from([
        0x3A,                           // STX              : 0x3A
        0x30, 0x30,                     // ADDRESS          : 0(int) -> 0(hex) -> 00(byte) -> 0x30 0x30(uft8 buffer)
        0x30, 0x32,                     // CMD              : 2(int) -> 2(hex) -> 02(byte) -> 0x30 0x32(uft8 buffer)
        0x30, 0x30,                     // VERSION          : 0(int) -> 0(hex) -> 00(byte) -> 0x30 0x30(uft8 buffer)
        0x30, 0x30, 0x34, 0x34,         // LEN              : 68(int) -> 44(hex) -> 0044(byte) -> 0x30 0x30 0x34 0x34(uft8 buffer)
        0x30, 0x32,                     // BAT SERIAL NUM   : 2(int) -> 2(hex) -> 02(byte) -> 0x30 0x32(uft8 buffer)
        0x41, 0x30, 0x34, 0x33,         // VOLT             : 41027(int) -> A043(hex) -> A043(byte) -> 0x41 0x30 0x34 0x33(uft8 buffer)
        0x41, 0x30, 0x34, 0x31,         // VOLT             : 41025(int) -> A041(hex) -> A041(byte) -> 0x41 0x30 0x34 0x31(uft8 buffer)
        0x30, 0x31, 0x41, 0x35,         // CURR1            : 421(int) -> 1A5(hex) -> 01A5(byte) -> 0x30 0x31 0x41 0x35(uft8 buffer)
        0x30, 0x30, 0x30, 0x30,         // CURR2            : 0(int) -> 0(hex) -> 0000(byte) -> 0x30 0x30 0x30 0x30(uft8 buffer)
        0x30, 0x31,                     // SYS TP NUM       : 1(int) -> 1(hex) -> 0001(byte) -> 0x30 0x30 0x30 0x31(uft8 buffer)
        0x33, 0x34,                     // SYS TP           : 52(int) -> 34(hex) -> 34(byte) -> 0x33 0x34(uft8 buffer)
        0x30, 0x31,                     // FET TP NUM       : 1(int) -> 1(hex) -> 0001(byte) -> 0x30 0x30 0x30 0x31(uft8 buffer)
        0x33, 0x32,                     // FET TP           : 50(int) -> 32(hex) -> 32(byte) -> 0x33 0x32(uft8 buffer)
        0x30, 0x31,                     // LTC TP NUM       : 1(int) -> 1(hex) -> 0001(byte) -> 0x30 0x30 0x30 0x31(uft8 buffer)
        0x32, 0x38,                     // LTC TP           : 40(int) -> 28(hex) -> 28(byte) -> 0x32 0x38(uft8 buffer)
        0x30, 0x31,                     // CELL TP NUM      : 1(int) -> 1(hex) -> 0001(byte) -> 0x30 0x30 0x30 0x31(uft8 buffer)
        0x34, 0x31,                     // CELL TP          : 65(int) -> 41(hex) -> 41(byte) -> 0x34 0x31(uft8 buffer)
        0x30, 0x31, 0x30, 0x31,         // ALARM STAT       : 
        0x30, 0x32,                     // FET STAT         : 
        0x30, 0x31,                     // LTC BRD NUM      : 
        0x31, 0x31, 0x31, 0x31,         // BAL INFO         : 
        0x30, 0x30, 0x35, 0x44,         // SOC              : 
        0x30, 0x30, 0x33, 0x33,         // SOH              : 
        0x30, 0x30, 0x34, 0x36,         // SOC2             : 
        0x30, 0x30,                     // CRC              : 
        0x7E                            // ETC              : 0x7E
    ]),
    // TS: Buffer.from([
    //     0x02,                            // STX              : 0x02
    //     0x51, 0x10, 0x83, 0x00, 0x00,    // ID               : 00000351(hex) -> 51030000(rev) -> 5110830000(trans) -> 0x51 0x10 0x83 0x00 0x00(buffer)
    //     0xE7, 0x10, 0x83,                // SOC              : 999(int) -> 03E7(hex) -> E703(rev) -> E71083(trans) -> 0xE7 0x10 0x83(buffer)
    //     0x2C, 0x00,                      // USED COUNT       : 44(int) -> 002C(hex) -> 2C00(rev) -> 0x2C 0x00(buffer)
    //     0x00,                            // FLAG1            : 0(int) -> 00(hex) -> 0x00(buffer)
    //     0x01,                            // FET              : 1(int) -> 01(hex) -> 0x01(buffer)
    //     0x01,                            // FLAG2            : 1(int) -> 01(hex) -> 0x01(buffer)
    //     0x00,                            // MODE             : 0(int) -> 00(hex) -> 0x00(buffer)
    //     // 0x11,                            // CRC              : 0x11
    //     0x03,                            // ETX              : 0x03

    //     0x02,                            // STX              : 0x02
    //     0x52, 0x10, 0x83, 0x00, 0x00,    // ID               : 00000352(hex) -> 52030000(rev) -> 5210830000(trans) -> 0x52 0x10 0x83 0x00 0x00(buffer)
    //     0x37, 0x00,                      // P_VOLT           : 55(int) -> 0037(hex) -> 3700(rev) -> 0x37 0x00(buffer)
    //     0x29, 0x00,                      // P_CURR           : 41(int) -> 0029(hex) -> 2900(rev) -> 0x29 0x00(buffer)
    //     0x50, 0x00,                      // DC_LIMIT_CURR    : 80(int) -> 0050(hex) -> 5000(rev) -> 0x50 0x00(buffer)
    //     0x14, 0x00,                      // C_LIMIT_CURR     : 20(int) -> 0014(hex) -> 1400(rev) -> 0x14 0x00(buffer)
    //     // 0x11,                            // CRC              : 0x11
    //     0x03,                            // ETX              : 0x03

    //     0x02,                            // STX              : 0x02
    //     0x54, 0x10, 0x83, 0x00, 0x00,    // ID               : 00000354(hex) -> 54030000(rev) -> 5410830000(trans) -> 0x54 0x10 0x83 0x00 0x00(buffer)
    //     0x22,                            // CELL_MAX_TP      : 34(int) -> 22(hex) -> 0x22(buffer)
    //     0x15,                            // CELL_MIN_TP      : 21(int) -> 15(hex) -> 0x15(buffer)
    //     0x1E,                            // CELL_AVE_TP      : 30(int) -> 1E(hex) -> 0x1E(buffer)
    //     0x19,                            // FET_TP           : 25(int) -> 19(hex) -> 0x19(buffer)
    //     // 0x11,                            // CRC              : 0x11
    //     0x03,                            // ETX              : 0x03

    //     0x02,                            // STX              : 0x02
    //     0x00, 0x01, 0x00, 0x00,          // ID               : 00010000(hex) -> 00000100(rev) -> 0x00 0x01 0x00 0x00(buffer)
    //     0xA0, 0x0F,                      // CELL_1           : 4000(int) -> 0FA0(hex) -> A00F(rev) -> 0xA0 0x0F(buffer)
    //     0xB8, 0x0B,                      // CELL_2           : 3000(int) -> 0BB8(hex) -> B80B(rev) -> 0xB8 0x0B(buffer)
    //     0xD0, 0x07,                      // CELL_3           : 2000(int) -> 07D0(hex) -> D007(rev) -> 0xD0 0x07(buffer)
    //     0xE8, 0x10, 0x83,                // CELL_4           : 1000(int) -> 03E8(hex) -> E803(rev) -> E81083(trans) -> 0xE8 0x10 0x83(buffer)
    //     // 0x11,                            // CRC              : 0x11
    //     0x03,                            // ETX              : 0x03

    //     0x02,                            // STX              : 0x02
    //     0x01, 0x01, 0x00, 0x00,          // ID               : 01010000(hex) -> 00000101(rev) -> 0x01 0x01 0x00 0x00(buffer)
    //     0x94, 0x11,                      // CELL_5           : 4500(int) -> 1194(hex) -> 9411(rev) -> 0x94 0x11(buffer)
    //     0xAC, 0x0D,                      // CELL_6           : 3500(int) -> 0DAC(hex) -> AC0D(rev) -> 0xAC 0x0D(buffer)
    //     0xC4, 0x09,                      // CELL_7           : 2500(int) -> 09C4(hex) -> C409(rev) -> 0xC4 0x09(buffer)
    //     0xDC, 0x05,                      // CELL_8           : 1500(int) -> 05DC(hex) -> DC05(rev) -> 0xDC 0x05(buffer)
    //     // 0x11,                            // CRC              : 0x11
    //     0x03,                            // ETX              : 0x03

    //     0x02,                            // STX              : 0x02
    //     0x06, 0x01, 0x00, 0x00,          // ID               : 06010000(hex) -> 00000106(rev) -> 0x06 0x01 0x00 0x00(buffer)
    //     0x1C,                            // TP_1             : 28(int) -> 001C(hex) -> 1C00(rev) -> 0x1C 0x00(buffer)
    //     0x0D, 0x00,                      // TP_2             : 13(int) -> 000D(hex) -> 0D00(rev) -> 0x0D 0x00(buffer)
    //     // 0x11,                            // CRC              : 0x11
    //     0x03,                            // ETX              : 0x03
    // ])

    // test data - 1
    // 51 10 83 00 00(Summary): SOC - 0xAA 0x1 -> 01AA -> 426 => 42.6
    // 52 10 83 00 00(PackValue): VOLT(SYS) - 0x10 0x83 0x10 0x82 -> 0203 -> 515 => 51.5 | CURR(SYS) - 0x0 0x0 -> 0
    // 54 10 83 00 00(Temperature): TP(SYS) - 0x1A -> 26
    // 06 01 00 00(Slave1 TP): TP1(mdl) - 0x1A -> 26 | TP2(mdl) - 0x1A -> 26
    // TS: Buffer.from([
    //     0x02, 0x51, 0x10, 0x83, 0x0, 0x0, 0xAA, 0x1, 0x0, 0xB, 0x0, 0x1, 0x0, 0x10, 0x83, 0x3,
    //     0x02, 0x52, 0x10, 0x83, 0x0, 0x0, 0x10, 0x83, 0x10, 0x82, 0x0, 0x0, 0x10, 0x8F, 0xE, 0x8, 0x7, 0x3,
    //     0x02, 0x54, 0x10, 0x83, 0x0, 0x0, 0x1A, 0x1A, 0x1A, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3,
    //     0x02, 0x6, 0x1, 0x0, 0x0, 0x1A, 0x1A, 0x1A, 0x1A, 0x0, 0x0, 0x0, 0x0, 0x3,

    //     0x02, 0x53, 0x10, 0x83, 0x0, 0x0, 0x64, 0xE, 0x62, 0xE, 0x63, 0xE, 0x1, 0x0, 0x3,
    //     0x02, 0x55, 0x10, 0x83, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3,
    //     0x02, 0x58, 0x10, 0x83, 0x0, 0x0, 0x0, 0x63, 0xE, 0x1E, 0xA, 0x10, 0x82, 0x0, 0x0, 0x3,
    //     0x02, 0x56, 0x10, 0x83, 0x0, 0x0, 0xC8, 0x81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3,
    //     0x02, 0x57, 0x10, 0x83, 0x0, 0x0, 0x3D, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x3,
    //     0x02, 0x59, 0x10, 0x83, 0x0, 0x0, 0x8C, 0xD7, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x3,
    //     0x02, 0x5F, 0x10, 0x83, 0x0, 0x0, 0xAC, 0x1, 0x92, 0x6, 0x0, 0x0, 0x0, 0x0, 0x3,
    //     0x02, 0x10, 0x8F, 0x1, 0x0, 0x0, 0x64, 0xE, 0x62, 0xE, 0x62, 0xE, 0x64, 0xE, 0x3,
    //     0x02, 0x21, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3,
    //     0x02, 0x10, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3,
    //     0x02, 0x9, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3
    // ])

    // test data - 2
    // 51 10 83 00 00(Summary): SOC - 0xAA 0x1 -> 01AA -> 426 => 42.6
    // 52 10 83 00 00(PackValue): VOLT(SYS) - 0x10 0x83 0x10 0x82 -> 0203 -> 515 => 51.5 | CURR(SYS) - 0x0 0x0 -> 0
    // 54 10 83 00 00(Temperature): TP(SYS) - 0x1A -> 26
    // 01 01 00 00(Slave1 Volt 5~8): 0x62 0x0E -> 0E62 -> 3682 => 3.682 | 0x64 0x0E -> 0E64 -> 3684 => 3.684 | 0x64 0x0E -> 0E64 -> 3684 => 3.684 | 0x00 0x00 -> 0
    // 06 01 00 00(Slave1 TP): TP1(mdl) - 0x1A -> 26 | TP2(mdl) - 0x1A -> 26
    // TS: Buffer.from([
    //     0x02, 0x51, 0x10, 0x83, 0x0, 0x0, 0xAA, 0x1, 0x0, 0xB, 0x0, 0x1, 0x0, 0x10, 0x83, 0x3,
    //     0x02, 0x52, 0x10, 0x83, 0x0, 0x0, 0x10, 0x83, 0x10, 0x82, 0x0, 0x0, 0x10, 0x8F, 0xE, 0x8, 0x7, 0x3,
    //     0x02, 0x54, 0x10, 0x83, 0x0, 0x0, 0x1A, 0x1A, 0x1A, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3,
    //     0x02, 0x1, 0x1, 0x0, 0x0, 0x62, 0xE, 0x64, 0xE, 0x64, 0xE, 0x0, 0x0, 0x3,
    //     0x02, 0x6, 0x1, 0x0, 0x0, 0x1A, 0x1A, 0x1A, 0x1A, 0x0, 0x0, 0x0, 0x0, 0x3,

    //     0x02, 0x53, 0x10, 0x83, 0x0, 0x0, 0x64, 0xE, 0x62, 0xE, 0x63, 0xE, 0x1, 0x0, 0x3,
    //     0x02, 0x55, 0x10, 0x83, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3,
    //     0x02, 0x58, 0x10, 0x83, 0x0, 0x0, 0x0, 0x63, 0xE, 0x1E, 0xA, 0x10, 0x82, 0x0, 0x0, 0x3,
    //     0x02, 0x56, 0x10, 0x83, 0x0, 0x0, 0xC8, 0x81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3,
    //     0x02, 0x57, 0x10, 0x83, 0x0, 0x0, 0x3D, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x3,
    //     0x02, 0x59, 0x10, 0x83, 0x0, 0x0, 0x8C, 0xD7, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x3,
    //     0x02, 0x5F, 0x10, 0x83, 0x0, 0x0, 0xAC, 0x1, 0x97, 0x6, 0x0, 0x0, 0x0, 0x0, 0x3,
    //     0x02, 0x20, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3,
    //     0x02, 0x12, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3,
    //     0x02, 0x19, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3,
    // ])

    // test data - 3
    // 51 10 83 00 00(Summary): SOC - 0xAA 0x1 -> 01AA -> 426 => 42.6
    // 52 10 83 00 00(PackValue): VOLT(SYS) - 0x10 0x83 0x10 0x82 -> 0203 -> 515 => 51.5 | CURR(SYS) - 0x0 0x0 -> 0
    // 54 10 83 00 00(Temperature): TP(SYS) - 0x1A -> 26
    // 00 01 00 00(Slave1 Volt 1~4): 0x64 0x0E -> 0E64 -> 3684 => 3.684 | 0x64 0x0E -> 0E64 -> 3684 => 3.684 | 0x62 0x0E -> 0E62 -> 3682 => 3.682 | 0x64 0x0E -> 0E64 -> 3684 => 3.684
    // 06 01 00 00(Slave1 TP): TP1(mdl) - 0x1A -> 26 | TP2(mdl) - 0x1A -> 26
    // TS: Buffer.from([
    //     0x02, 0x51, 0x10, 0x83, 0x0, 0x0, 0xAA, 0x1, 0x0, 0xB, 0x0, 0x1, 0x0, 0x10, 0x83, 0x3,
    //     0x02, 0x52, 0x10, 0x83, 0x0, 0x0, 0x10, 0x83, 0x10, 0x82, 0x0, 0x0, 0x10, 0x8F, 0xE, 0x8, 0x7, 0x3,
    //     0x02, 0x54, 0x10, 0x83, 0x0, 0x0, 0x1A, 0x1A, 0x1A, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3,
    //     0x02, 0x0, 0x1, 0x0, 0x0, 0x64, 0xE, 0x64, 0xE, 0x62, 0xE, 0x64, 0xE, 0x3,
    //     0x02, 0x6, 0x1, 0x0, 0x0, 0x1A, 0x1A, 0x1A, 0x1A, 0x0, 0x0, 0x0, 0x0, 0x3,

    //     0x02, 0x53, 0x10, 0x83, 0x0, 0x0, 0x64, 0xE, 0x61, 0xE, 0x63, 0xE, 0x0, 0xD, 0x3,
    //     0x02, 0x55, 0x10, 0x83, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3,
    //     0x02, 0x58, 0x10, 0x83, 0x0, 0x0, 0x0, 0x63, 0xE, 0x1E, 0xA, 0x10, 0x82, 0x0, 0x0, 0x3,
    //     0x02, 0x56, 0x10, 0x83, 0x0, 0x0, 0xC8, 0x81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3,
    //     0x02, 0x57, 0x10, 0x83, 0x0, 0x0, 0x3D, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x3,
    //     0x02, 0x59, 0x10, 0x83, 0x0, 0x0, 0x8C, 0xD7, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x3,
    //     0x02, 0x5F, 0x10, 0x83, 0x0, 0x0, 0xAC, 0x1, 0x9C, 0x6, 0x0, 0x0, 0x0, 0x0, 0x3,
    //     0x02, 0x11, 0x1, 0x0, 0x0, 0x64, 0xE, 0x62, 0xE, 0x61, 0xE, 0x0, 0x0, 0x3,
    //     0x02, 0x22, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3,
    //     0x02, 0x29, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3,
    // ])

    TS: Buffer.from([
        0x2, 0x51, 0x10, 0x83, 0x0, 0x0, 0x97, 0x1, 0x0, 0xB, 0x0, 0x1, 0x0, 0x10, 0x83, 0x3,
        0x2, 0x52, 0x10, 0x83, 0x0, 0x0, 0x1, 0x10, 0x82, 0x0, 0x0, 0x10, 0x8F, 0xE, 0x8, 0x7, 0x3,
        0x2, 0x53, 0x10, 0x83, 0x0, 0x0, 0x56, 0xE, 0x55, 0xE, 0x55, 0xE, 0x0, 0x10, 0x82, 0x3,
        0x2, 0x54, 0x10, 0x83, 0x0, 0x0, 0x1A, 0x1A, 0x1A, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3,
        0x2, 0x55, 0x10, 0x83, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3,
        0x2, 0x58, 0x10, 0x83, 0x0, 0x0, 0x0, 0x55, 0xE, 0x1E, 0xA, 0x1, 0x0, 0x0, 0x3,
        0x2, 0x56, 0x10, 0x83, 0x0, 0x0, 0xC1, 0x81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3,
        0x2, 0x57, 0x10, 0x83, 0x0, 0x0, 0x61, 0xFE, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x3,
        0x2, 0x59, 0x10, 0x83, 0x0, 0x0, 0x8C, 0xD7, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x3,
        0x2, 0x5F, 0x10, 0x83, 0x0, 0x0, 0x98, 0x1, 0xCA, 0x5, 0x0, 0x0, 0x0, 0x0, 0x3,
        0x2, 0x0, 0x1, 0x0, 0x0, 0x56, 0xE, 0x56, 0xE, 0x55, 0xE, 0x56, 0xE, 0x3,
        0x2, 0x11, 0x1, 0x0, 0x0, 0x56, 0xE, 0x55, 0xE, 0x53, 0xE, 0x0, 0x0, 0x3,
        0x2, 0x22, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3,
        0x2, 0x6, 0x1, 0x0, 0x0, 0x1A, 0x1A, 0x1A, 0x1A, 0x0, 0x0, 0x0, 0x0, 0x3,
        0x2, 0x29, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3,
    ])
}

// make head
// STX: 1 / SOH: 1 / LEN: 2 / CMD: 2 / BOARDNUM: 24
function makeHead(type, num) {
    const STX = Buffer.from([0x02]);
    const SOH = Buffer.from([0x01]);
    const LEN = Buffer.from([0x00, 0x1E]);
    const CMD = CMDVal[type] ? CMDVal[type] : Buffer.from([0x00, 0x00]);
    const BOARDNUM = Buffer.from(num, 'hex');

    return Buffer.concat([STX, SOH, LEN, CMD, BOARDNUM]);
}

// make tail
// CRC: 1 / ETX: 1
function makeTail() {
    const CRC = Buffer.from([0x01]);
    const ETX = Buffer.from([0x03]);

    return Buffer.concat([CRC, ETX]);
}

/** 
 * make main data
 * 1. TP and HD
 *  - TP1: 2 / HD1: 2 / TP2: 2 / HD2: 2
 * 2. VOLT and CURR
 *  - VOLT: 4 / CURR: 4
 * 3. LOC
 *  - LAT(INT): 1 / LAT(REAL): 4 / LON(INT): 1 / LON(REAL): 4
*/
function makeMainData(type) {
    return CMDMainData[type] ? CMDMainData[type] : Buffer.from([0x00]);
}

function makeBizData(type) {
    return CMDBizData[type] ? CMDBizData[type] : Buffer.from([0x00]);
}

function makeRandomBuff(min, max, byte) {
    const buff = Buffer.alloc(byte);
    buff.writeIntLE(Math.floor(Math.random() * (max - min + 1)) + min, 0, byte);
    return buff;
}

module.exports = {
    CMDType: CMDType,
    head: makeHead,
    tail: makeTail,
    data: {
        main: makeMainData,
        biz: makeBizData
    }
}